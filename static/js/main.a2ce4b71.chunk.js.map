{"version":3,"sources":["data/localStorage.js","panels/RegisterPage.jsx","panels/LoginPage.jsx","components/DialogToAdd.jsx","components/Header.jsx","components/Debt.jsx","panels/MainPage.jsx","components/Graph.jsx","panels/ProfilePage.jsx","App.js","serviceWorker.js","index.js"],"names":["getData","key","localStorage","JSON","parse","getItem","err","console","error","storeData","item","setItem","stringify","AlreadyRegistered","Typography","variant","color","align","Link","href","useStyles","makeStyles","theme","root","height","image","backgroundImage","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","secondary","main","form","width","marginTop","submit","RegisterPage","classes","history","useHistory","enqueueSnackbar","useSnackbar","currentUsers","name_tf","useRef","email_tf","password_tf","second_password_tf","useState","nameText","setNameText","emailText","setEmailText","passwordText","setPasswordText","secondPasswordText","setSecondPasswordText","nameError","test","emailError","passwordError","secondPasswordError","Grid","container","component","className","CssBaseline","xs","sm","md","Paper","elevation","square","Avatar","noValidate","TextField","required","fullWidth","id","label","inputRef","value","onChange","e","currentTarget","helperText","autoFocus","Button","onClick","found","i","length","EMAIL","newUsers","Array","push","PASSWORD","NAME","Box","LoginPage","setUserLoggedIn","store","require","rememberMe","Copyright","Date","getFullYear","defaultValue","get","FormControlLabel","control","Checkbox","userExist","email","current","password","forEach","element","checked","set","remove","mt","flexGrow","DialogToAdd","handleClose","open","setValue","tome_name_tf","tome_sum_tf","tome_email_tf","tome_date_tf","meto_name_tf","meto_sum_tf","meto_email_tf","meto_date_tf","nameRegex","emailRegex","sumRegex","dateRegex","noteNameError","setNoteNameError","noteEmailError","setNoteEmailError","noteSumError","setNoteSumError","noteDateError","setNoteDateError","listOfNotes","Dialog","onClose","aria-labelledby","DialogTitle","style","paddingBottom","textAlign","DialogContent","TabContext","AppBar","position","TabList","event","newValue","aria-label","indicatorColor","textColor","Tab","TabPanel","InputLabelProps","shrink","DialogActions","name","sum","date","isCorrect","checkValues","unshift","ID","SUM","DATE","menu","right","typographyStyles","flex","fontStyle","textDecoration","HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","Header","React","anchorEl","setAnchorEl","isMain","pageId","currentUser","allUsers","userName","goToMain","Fragment","Toolbar","IconButton","paddingLeft","paddingRight","aria-controls","aria-haspopup","fontSize","marginRight","Menu","keepMounted","Boolean","MenuItem","title","marginBottom","buttons","button","paddingTop","edit","maxWidth","marginLeft","iconDiv","justifyContent","Debt","updateParent","isEditable","setIsEditable","sum_tf","date_tf","lg","Card","gutterBottom","justify","CardContent","CardActions","currentNotes","pos","splice","new_name","new_sum","new_email","new_date","content","top","bottom","header","MainPage","userLoggedIn","setOpen","update","setUpdate","map","note","size","startIcon","Graph","data","allNotes","curentToMeSum","currentMeToSum","sort","a","b","reverse","parseInt","pop","tome","meto","strokeDasharray","dataKey","stroke","activeDot","r","infos","padding","editButton","ProfilePage","editName","setEditName","editEmail","setEditEmail","editPassword","setEditPassword","meToGeneralSum","toMeGeneralSum","currentUserPos","currentUserName","currentUserEmail","currentUserPassword","setUserName","userEmail","setUserEmail","userPassword","setUserPassword","trySave","newName","newEmail","newPassword","Password","log","App","exact","path","render","location","hostname","match","createBrowserHistory","ReactDOM","maxSnack","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a2ce4b71.chunk.js","sourcesContent":["export const getData = (key) => {\r\n\tif (!localStorage) return;\r\n\r\n\ttry {\r\n\t\treturn JSON.parse(localStorage.getItem(key));\r\n\t} catch (err) {\r\n\t\tconsole.error(`Error getting item ${key} from localStorage`, err);\r\n\t}\r\n};\r\n\r\nexport const storeData = (key, item) => {\r\n\tif (!localStorage) return;\r\n\r\n\ttry {\r\n\t\treturn localStorage.setItem(key, JSON.stringify(item));\r\n\t} catch (err) {\r\n\t\tconsole.error(`Error storing item ${key} to localStorage`, err);\r\n\t}\r\n};\r\n\r\nexport const clearData = (key) => {\r\n\tif (!localStorage) return;\r\n\t\r\n    const store = require('store')\r\n\tstore.set(key, [])\r\n};","import React, { useState, useRef } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSnackbar } from 'notistack';\r\nimport { getData, storeData } from '../data/localStorage';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    CssBaseline,\r\n    TextField,\r\n    Link,\r\n    Paper,\r\n    Box,\r\n    Grid,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\nfunction AlreadyRegistered() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Уже есть аккаунт? '}\r\n            <Link color=\"inherit\" href=\"/login\">\r\n                Войти\r\n            </Link>\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: 'url(https://www.practicalmoneyskills.com/assets/images/non-card/creating_a_budget.jpg)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst RegisterPage = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    var currentUsers = getData(\"users\")\r\n    if (!currentUsers) \r\n        currentUsers = []\r\n\r\n    let name_tf = useRef(null);\r\n    let email_tf = useRef(null);\r\n    let password_tf = useRef(null);\r\n    let second_password_tf = useRef(null);\r\n\r\n    const nameRegex = /^[а-яА-Яa-zA-Z]+$/\r\n    const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/\r\n\r\n    const [nameText, setNameText] = useState(\"\");\r\n    const [emailText, setEmailText] = useState(\"\");\r\n    const [passwordText, setPasswordText] = useState(\"\");\r\n    const [secondPasswordText, setSecondPasswordText] = useState(\"\");\r\n    const nameError = !nameRegex.test(nameText)\r\n    const emailError = !emailRegex.test(emailText)\r\n    const passwordError = !passwordRegex.test(passwordText)\r\n    const secondPasswordError = !(secondPasswordText === passwordText)\r\n\r\n\r\n    function tryRegister() {\r\n        if (nameError || emailError || passwordError || secondPasswordError) return\r\n\r\n        let found = false;\r\n        for (let i = 0; i < currentUsers.length; i++) {\r\n            if (currentUsers[i].EMAIL === emailText ) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (found) {\r\n            enqueueSnackbar('Пользователь с таким email уже существует', {variant: 'error'});\r\n            return\r\n        }\r\n\r\n        let newUsers = new Array(currentUsers)\r\n        newUsers.push({ EMAIL: emailText, PASSWORD: passwordText, NAME: nameText })\r\n        storeData(\"users\", newUsers)\r\n        history.push(\"/login\")\r\n    }\r\n\r\n    return (\r\n        <Grid container component=\"main\" className={classes.root}>\r\n            <CssBaseline />\r\n            <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Регистрация\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <TextField\r\n                            error={nameError}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"name\"\r\n                            label=\"Имя\"\r\n                            type=\"text\"\r\n                            inputRef={name_tf}\r\n                            value={nameText}\r\n                            onChange={e => { setNameText(e.currentTarget.value) }}\r\n                            helperText={nameError ? \"Введите корректное имя\" : \"\"}\r\n                            autoFocus\r\n                        />\r\n                        <TextField\r\n                            error={emailError}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            value={emailText}\r\n                            onChange={e => { setEmailText(e.currentTarget.value) }}\r\n                            helperText={emailError ? \"Введите корректный email\" : \"\"}\r\n                            inputRef={email_tf}\r\n                        />\r\n                        <TextField\r\n                            error={passwordError}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Пароль\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            inputRef={password_tf}\r\n                            value={passwordText}\r\n                            onChange={e => { setPasswordText(e.currentTarget.value) }}\r\n                            helperText={passwordError ? \"Пароль должен быть длиннее 8 символов, содержать цифру и букву\" : \"\"}\r\n                        />\r\n                        <TextField\r\n                            error={secondPasswordError}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Повторите пароль\"\r\n                            type=\"password\"\r\n                            id=\"password_second\"\r\n                            inputRef={second_password_tf}\r\n                            value={secondPasswordText}\r\n                            onChange={e => { setSecondPasswordText(e.currentTarget.value) }}\r\n                            helperText={secondPasswordError ? \"Пароли не совпадают\" : \"\"}\r\n                        />\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            onClick={tryRegister}\r\n                        >\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                        <Box>\r\n                            <AlreadyRegistered />\r\n                        </Box>\r\n                    </form>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default RegisterPage","import React, { useRef } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getData } from '../data/localStorage';\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    CssBaseline,\r\n    TextField,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    Link,\r\n    Paper,\r\n    Box,\r\n    Grid,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: 'url(https://www.practicalmoneyskills.com/assets/images/non-card/creating_a_budget.jpg)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\n\r\n\r\n\r\nconst LoginPage = ({setUserLoggedIn}) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const store = require('store')\r\n\r\n    var currentUsers = getData('users')\r\n    if (!currentUsers)\r\n        currentUsers = []\r\n\r\n    let rememberMe = useRef(null);\r\n    let email_tf = useRef(null);\r\n    let password_tf = useRef(null);\r\n\r\n\r\n    function tryLogin() {\r\n        let userExist = false;\r\n        let email = email_tf.current.value\r\n        let password = password_tf.current.value\r\n\r\n        currentUsers.forEach(element => {\r\n            if (element.EMAIL === email & element.PASSWORD === password)\r\n                userExist = true\r\n        });\r\n\r\n        if (userExist) {\r\n            if (rememberMe.current.checked)\r\n                store.set(\"rememberedEmail\", email_tf.current.value)\r\n            else store.remove('rememberedEmail')\r\n            store.set('loggedUser', email)\r\n            setUserLoggedIn(true)\r\n            history.push(\"/\")\r\n            }            \r\n    }\r\n\r\n\r\n    function Copyright() {\r\n        return (\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://vk.com/votelroge\">\r\n                    Summer practice, TPU\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid container component=\"main\" className={classes.root}>\r\n            <CssBaseline />\r\n            <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Войти\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            inputRef={email_tf}\r\n                            defaultValue={store.get('rememberedEmail')}\r\n                            autoFocus\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            label=\"Пароль\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            inputRef={password_tf}\r\n                        />                        \r\n                        <FormControlLabel\r\n                            control={<Checkbox value=\"remember\" inputRef={rememberMe} color=\"primary\" />}\r\n                            label=\"Запомнить\"\r\n                            id=\"rememberMe\"\r\n                            \r\n                        />\r\n                        <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            onClick={tryLogin}\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                    Забыли пароль?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link href=\"/register\" variant=\"body2\">\r\n                                    {\"Создать аккаунт\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Box mt={5}>\r\n                            <Copyright />\r\n                        </Box>\r\n                    </form>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default LoginPage","import React, { useRef, useState } from 'react';\r\nimport { useSnackbar } from 'notistack';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    AppBar,\r\n    Tab,\r\n} from '@material-ui/core';\r\nimport { TabContext, TabList, TabPanel } from '@material-ui/lab';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getData, storeData } from '../data/localStorage';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: 'white',\r\n    },\r\n}));\r\n\r\n\r\nconst DialogToAdd = ({ handleClose, open }) => {\r\n    const classes = useStyles();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [value, setValue] = useState('tome');\r\n\r\n\r\n    let tome_name_tf = useRef(null);\r\n    let tome_sum_tf = useRef(null);\r\n    let tome_email_tf = useRef(null);\r\n    let tome_date_tf = useRef(null);\r\n\r\n    let meto_name_tf = useRef(null);\r\n    let meto_sum_tf = useRef(null);\r\n    let meto_email_tf = useRef(null);\r\n    let meto_date_tf = useRef(null);\r\n\r\n    const nameRegex = /^[а-яА-Яa-zA-Z]+$/\r\n    const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    const sumRegex = /^[0-9]+$/\r\n    const dateRegex = /^[1-2][0-9][0-9][0-9]\\-[0-1][0-9]\\-[0-3][0-9]$/\r\n    \r\n\r\n    const [noteNameError, setNoteNameError] = useState(false)\r\n    const [noteEmailError, setNoteEmailError] = useState(false)\r\n    const [noteSumError, setNoteSumError] = useState(false)\r\n    const [noteDateError, setNoteDateError] = useState(false)\r\n\r\n\r\n    var listOfNotes = getData('notes')\r\n\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    function updateErrors() {\r\n        setNoteNameError(false)\r\n        setNoteEmailError(false)\r\n        setNoteSumError(false)\r\n        setNoteDateError(false)\r\n    }\r\n\r\n    function checkValues(name, sum, email, date) {\r\n        let isCorrect = true\r\n        if (!nameRegex.test(name)) {\r\n            setNoteNameError(true)\r\n            isCorrect = false\r\n        } else setNoteNameError(false)\r\n\r\n        if (!sumRegex.test(sum)) {\r\n            setNoteSumError(true)\r\n            isCorrect = false\r\n        } else setNoteSumError(false)\r\n\r\n        if (!emailRegex.test(email) && email !== '') {\r\n            setNoteEmailError(true)\r\n            isCorrect = false\r\n        } else setNoteEmailError(false)\r\n\r\n        if (!dateRegex.test(date)) {\r\n            setNoteDateError(true)\r\n            isCorrect = false\r\n        } else setNoteDateError(false)\r\n\r\n        return isCorrect\r\n    }\r\n\r\n    const tryAdd = () => {\r\n        switch (value) {\r\n            case 'tome': {\r\n                let name = tome_name_tf.current.value;\r\n                let sum = tome_sum_tf.current.value;\r\n                let email = tome_email_tf.current.value;\r\n                let date = tome_date_tf.current.value;\r\n\r\n                if (!checkValues(name, sum, email, date))\r\n                    return\r\n\r\n                listOfNotes.unshift({ ID: 'tome', NAME: name, SUM: sum, EMAIL: email, DATE: date })\r\n                storeData('notes', listOfNotes)\r\n                handleClose()\r\n                break;\r\n            }\r\n            case 'meto': {\r\n                let name = meto_name_tf.current.value;\r\n                let sum = meto_sum_tf.current.value;\r\n                let email = meto_email_tf.current.value;\r\n                let date = meto_date_tf.current.value;\r\n\r\n                listOfNotes.push({ ID: 'meto', NAME: name, SUM: sum, EMAIL: email, DATE: date })\r\n                storeData('notes', listOfNotes)\r\n                handleClose()\r\n                break;\r\n            }\r\n        }\r\n        updateErrors()\r\n        enqueueSnackbar('Запись успешно создана', { variant: 'success' })\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\" style={{ paddingBottom: '0px', textAlign: 'center' }}>\r\n                Добавить запись\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <TabContext value={value}>\r\n                    <AppBar position=\"static\" >\r\n                        <TabList\r\n                            onChange={handleChange}\r\n                            className={classes.root}\r\n                            aria-label=\"simple tabs example\"\r\n                            variant='fullWidth'\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                        >\r\n                            <Tab label=\"Мне должны\" value=\"tome\" />\r\n                            <Tab label=\"Я должен\" value=\"meto\" />\r\n                        </TabList>\r\n                    </AppBar>\r\n                    <TabPanel value=\"tome\">\r\n                        <TextField\r\n                            error={noteNameError}\r\n                            autoFocus\r\n                            required\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Введите имя\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            inputRef={tome_name_tf}\r\n                        />\r\n                        <TextField\r\n                            error={noteSumError}\r\n                            required\r\n                            margin=\"dense\"\r\n                            id=\"sum\"\r\n                            label=\"Введите сумму\"\r\n                            type=\"number\"\r\n                            fullWidth\r\n                            inputRef={tome_sum_tf}\r\n                        />\r\n                        <TextField\r\n                            error={noteEmailError}\r\n                            margin=\"dense\"\r\n                            id=\"email\"\r\n                            label=\"Введите email\"\r\n                            type=\"email\"\r\n                            fullWidth\r\n                            inputRef={tome_email_tf}\r\n                        />\r\n                        <TextField\r\n                            error={noteDateError}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            margin=\"dense\"\r\n                            id=\"date\"\r\n                            label=\"Введите дату\"\r\n                            type=\"date\"\r\n                            fullWidth\r\n                            inputRef={tome_date_tf}\r\n                        />\r\n                    </TabPanel>\r\n                    <TabPanel value=\"meto\">\r\n                        <TextField\r\n                            required\r\n                            error={noteNameError}\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Введите имя\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            inputRef={meto_name_tf}\r\n                        />\r\n                        <TextField\r\n                            required\r\n                            error={noteSumError}\r\n                            margin=\"dense\"\r\n                            id=\"sum\"\r\n                            label=\"Введите сумму\"\r\n                            type=\"number\"\r\n                            fullWidth\r\n                            inputRef={meto_sum_tf}\r\n                        />\r\n                        <TextField\r\n                            error={noteEmailError}\r\n                            margin=\"dense\"\r\n                            id=\"email\"\r\n                            label=\"Введите email\"\r\n                            type=\"email\"\r\n                            fullWidth\r\n                            inputRef={meto_email_tf}\r\n                        />\r\n                        <TextField\r\n                            error={noteDateError}\r\n                            required\r\n                            InputLabelProps={{ shrink: true }}\r\n                            margin=\"dense\"\r\n                            id=\"date\"\r\n                            label=\"Введите дату\"\r\n                            type=\"date\"\r\n                            fullWidth\r\n                            inputRef={meto_date_tf}\r\n                        />\r\n                    </TabPanel>\r\n                </TabContext>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Отмена\r\n                    </Button>\r\n                <Button onClick={tryAdd} color=\"primary\">\r\n                    Добавить\r\n                    </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default DialogToAdd","import React from \"react\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n    useScrollTrigger,\r\n    Slide,\r\n    CssBaseline,\r\n    Menu,\r\n    MenuItem\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { getData, storeData } from '../data/localStorage';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menu: {\r\n        display: 'flex',\r\n        right: 0\r\n    },\r\n    typographyStyles: {\r\n        flex: 1,\r\n        fontStyle: 'bold',\r\n        textDecoration: 'underline'\r\n    },\r\n}));\r\n\r\n\r\nfunction HideOnScroll(props) {\r\n    const { children, window } = props;\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n    return (\r\n        <Slide appear={false} direction=\"down\" in={!trigger}>\r\n            {children}\r\n        </Slide>\r\n    );\r\n}\r\n\r\nconst Header = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const setUserLoggedIn = props.setUserLoggedIn\r\n\r\n    const pageId = props.pageId\r\n    const isMain = pageId === 'main' ? true : false\r\n\r\n    const currentUser = getData('loggedUser')\r\n    const allUsers = getData('users')\r\n    var userName = \"\"\r\n    for (let i = 0; i< allUsers.length; i++) {\r\n        if (allUsers[i].EMAIL === currentUser)\r\n            userName = allUsers[i].NAME\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const tryLogout = () => {\r\n        storeData('loggedUser', null)\r\n        setUserLoggedIn(false)\r\n    }\r\n\r\n    const goToProfile = () => {\r\n        history.push('/profile')\r\n    }\r\n\r\n    const goToMain = () => {\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <HideOnScroll {...props}>\r\n                <AppBar>\r\n                    <Toolbar>\r\n                        {\r\n                            !isMain \r\n                            && <IconButton\r\n                                    style={{paddingLeft: '0', paddingRight: '0', color: 'white'}}\r\n                                    onClick={goToMain}\r\n                                >\r\n                                    <ArrowBackIosIcon/>\r\n                                </IconButton>\r\n                        }\r\n                        <Typography className={classes.typographyStyles} variant='h4'>\r\n                            В долгах\r\n                        </Typography>\r\n                        <IconButton \r\n                            aria-controls=\"simple-menu\" \r\n                            aria-haspopup=\"true\" \r\n                            onClick={handleClick} \r\n                            style={{ color: 'white', fontSize: '1.2rem', paddingRight: '0' }}\r\n                        >\r\n                            <AccountCircleIcon style={{marginRight: '4px', fontSize: '1.8rem'}}/>{userName}<ArrowDropDownIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </HideOnScroll>\r\n            <Toolbar />\r\n\r\n            <Menu\r\n                className={classes.menu}\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                { \r\n                    isMain\r\n                    ? <MenuItem onClick={goToProfile}>Профиль</MenuItem>\r\n                    : <MenuItem onClick={goToMain}>Мои долги</MenuItem>\r\n                }\r\n                {\r\n                    !isMain && <MenuItem onClick={goToMain}>Редактировать</MenuItem>\r\n                }\r\n                <MenuItem onClick={tryLogout}>Выйти</MenuItem>\r\n            </Menu>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, { useState, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, Grid, CardActions, CardContent, TextField, Typography, IconButton } from '@material-ui/core';\r\nimport { getData, storeData } from '../data/localStorage';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    title: {\r\n        fontSize: 12,\r\n        textAlign: 'center',\r\n        marginTop: '8px'\r\n    },\r\n    name: {\r\n\r\n    },\r\n    sum: {\r\n        fontStyle: 'italic'\r\n\r\n    },\r\n    date: {\r\n        textAlign: 'right'\r\n    },\r\n    email: {\r\n        marginBottom: 0,\r\n        paddingBottom: 0\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    button: {\r\n        fontSize: '16px',\r\n        paddingBottom: '10px',\r\n        paddingTop: '0px',\r\n        paddingLeft: '0px',\r\n        paddingRight: '0px'\r\n    },\r\n    edit: {\r\n        maxWidth: '160px',\r\n        marginRight: '8px',\r\n        marginLeft: '8px',\r\n    },\r\n    iconDiv: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'inherit',\r\n        justifyContent: 'inherit'\r\n    }\r\n});\r\n\r\nexport default function Debt({ id, name, sum, email, date, updateParent }) {\r\n    const classes = useStyles();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [isEditable, setIsEditable] = useState(false);\r\n\r\n    let name_tf = useRef(null);\r\n    let sum_tf = useRef(null);\r\n    let email_tf = useRef(null);\r\n    let date_tf = useRef(null);\r\n\r\n    const tryDelete = () => {\r\n        let currentNotes = getData('notes')\r\n        let pos = -1\r\n        for (let i = 0; i < currentNotes.length; i++) {\r\n            if (currentNotes[i].ID === id && currentNotes[i].NAME === name && currentNotes[i].SUM === sum && currentNotes[i].EMAIL === email)\r\n                pos = i\r\n        }\r\n        if (pos !== -1)\r\n            currentNotes.splice(pos, 1);\r\n\r\n        storeData('notes', currentNotes)\r\n        updateParent()\r\n        enqueueSnackbar('Запись удалена', {variant: 'warning'})\r\n    }\r\n\r\n\r\n    const tryEdit = () => {\r\n        setIsEditable(!isEditable)\r\n    }\r\n\r\n    const trySave = () => {\r\n        let currentNotes = getData('notes')\r\n        let pos = 0\r\n        let new_name = name_tf.current.value;\r\n        let new_sum = sum_tf.current.value;\r\n        let new_email = email_tf.current.value;\r\n        let new_date = date_tf.current.value;\r\n\r\n        for (let i = 0; i < currentNotes.length; i++) {\r\n            if (currentNotes[i].ID === id && currentNotes[i].NAME === name && currentNotes[i].SUM === sum && currentNotes[i].EMAIL === email)\r\n                pos = i\r\n        }\r\n\r\n        currentNotes[pos].NAME = new_name\r\n        currentNotes[pos].EMAIL = new_email\r\n        currentNotes[pos].SUM = new_sum\r\n        currentNotes[pos].DATE = new_date\r\n        storeData('notes', currentNotes)\r\n\r\n        setIsEditable(!isEditable)\r\n        updateParent()\r\n        enqueueSnackbar('Запись сохранена', {variant: 'success'})\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid item xs={12} sm={12} md={6} lg={4}>\r\n            <Card className={classes.root} variant=\"outlined\">\r\n                <Grid container direction='column'>\r\n                    <Grid item>\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                            {id === 'tome' ? 'Мне должен' : 'Я должен'}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction='row' justify=\"space-between\">\r\n                        <Grid item >\r\n                            <CardContent>\r\n                                {\r\n                                    !isEditable\r\n                                        ? <Typography className={classes.name} variant=\"h5\" component=\"h6\">\r\n                                            {name}\r\n                                        </Typography>\r\n                                        : <TextField\r\n                                            className={classes.edit}\r\n                                            required\r\n                                            autoFocus\r\n                                            defaultValue={name}\r\n                                            margin=\"dense\"\r\n                                            id=\"name\"\r\n                                            label=\"Введите имя\"\r\n                                            type=\"text\"\r\n                                            inputRef={name_tf}\r\n                                        />\r\n                                }\r\n                                {\r\n                                    !isEditable\r\n                                        ? <Typography variant=\"body2\" color=\"textSecondary\" component=\"h2\" className={classes.email}>\r\n                                            {email}\r\n                                        </Typography>\r\n                                        : <TextField\r\n                                            className={classes.edit}\r\n                                            required\r\n                                            defaultValue={sum}\r\n                                            margin=\"dense\"\r\n                                            id=\"sum\"\r\n                                            label=\"Введите сумму\"\r\n                                            type=\"number\"\r\n                                            fullWidth\r\n                                            inputRef={sum_tf}\r\n                                        />\r\n\r\n                                }\r\n                            </CardContent>\r\n                        </Grid>\r\n\r\n                        <Grid item>\r\n                            <CardContent>\r\n                                {\r\n                                    !isEditable\r\n                                        ? <Typography className={classes.sum} variant=\"h6\" component=\"h6\">\r\n                                            {sum} руб.\r\n                                        </Typography>\r\n                                        : <TextField\r\n                                            className={classes.edit}\r\n                                            defaultValue={email}\r\n                                            margin=\"dense\"\r\n                                            id=\"email\"\r\n                                            label=\"Введите email\"\r\n                                            type=\"email\"\r\n                                            inputRef={email_tf}\r\n                                        />\r\n                                }\r\n                                {\r\n                                    !isEditable\r\n                                        ? <Typography className={classes.date} variant=\"body2\" color=\"textSecondary\" >\r\n                                            {date}\r\n                                        </Typography>\r\n                                        : <TextField\r\n                                            className={classes.edit}\r\n                                            defaultValue={date}\r\n                                            InputLabelProps={{ shrink: true }}\r\n                                            margin=\"dense\"\r\n                                            id=\"date\"\r\n                                            label=\"Введите дату\"\r\n                                            type=\"date\"\r\n                                            fullWidth\r\n                                            inputRef={date_tf}\r\n                                        />\r\n                                }\r\n                            </CardContent>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <CardActions className={classes.buttons}>\r\n                        <Grid container direction='row' justify=\"space-evenly\" alignItems=\"flex-end\">\r\n                            <Grid item>\r\n                                <IconButton\r\n                                    className={classes.button}\r\n                                    onClick={tryDelete}\r\n                                > <DeleteIcon /> Удалить\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <IconButton\r\n                                    className={classes.button}\r\n                                    onClick={ !isEditable ? tryEdit : trySave }\r\n                                >\r\n                                    {\r\n                                        !isEditable\r\n                                            ? <div className={classes.iconDiv}><EditIcon />Редактировать</div>\r\n                                            : <div className={classes.iconDiv}><SaveIcon />Сохранить</div>\r\n                                    }\r\n\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <IconButton\r\n                                    className={classes.button}\r\n                                > <MailIcon /> Напомнить\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActions>\r\n                </Grid>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { \r\n    Button, \r\n    Grid\r\n    } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getData } from '../data/localStorage';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport DialogToAdd from '../components/DialogToAdd'\r\nimport Header from '../components/Header';\r\nimport Debt from '../components/Debt'\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    content: {\r\n\r\n    },\r\n    button: {\r\n        textAlign: 'center',\r\n        position: 'sticky',\r\n        top: 'auto',\r\n        bottom: 0,\r\n    },\r\n    header: {\r\n        position: 'sticky',\r\n        top: '0'\r\n\r\n    }\r\n});\r\n\r\n\r\nconst MainPage = ({ userLoggedIn, setUserLoggedIn }) => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [update, setUpdate] = React.useState(false);\r\n\r\n    var listOfNotes = getData('notes')\r\n    if (listOfNotes == null) \r\n        listOfNotes = []\r\n\r\n\r\n    // УБРАТЬ!!\r\n    !userLoggedIn && history.push(\"/login\")\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const tryAdd = () => {\r\n\r\n    }\r\n\r\n    const updateParent = () => {\r\n        setUpdate(!update)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"column\">\r\n                <Grid item className={classes.header}>\r\n                    <Header setUserLoggedIn={setUserLoggedIn} pageId={'main'}/>\r\n                </Grid>\r\n\r\n                <Grid item container >\r\n                    <Grid item xs={false} sm={1} />\r\n                    <Grid item container xs={12} sm={10} className={classes.content}>\r\n                        {\r\n                            listOfNotes.map((note, i) => (\r\n                                <Debt key={i} id={note.ID} name={note.NAME} sum={note.SUM} email={note.EMAIL} date={note.DATE} updateParent={updateParent}/>\r\n                            ))\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={false} sm={1} />\r\n                </Grid>\r\n\r\n                <Grid item className={classes.button}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                        startIcon={<AddIcon />}\r\n                        onClick={handleClickOpen}\r\n                    >\r\n                        Добавить запись\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <DialogToAdd handleClose={handleClose} open={open} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage","import React, { PureComponent } from 'react';\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\r\n} from 'recharts';\r\nimport { getData } from '../data/localStorage';\r\n\r\n\r\n\r\n\r\nconst Graph = () => {\r\n\r\n    var data = []\r\n    var allNotes = getData('notes')\r\n    var curentToMeSum = 0\r\n    var currentMeToSum = 0\r\n\r\n    allNotes.sort(function (a, b) {\r\n        return new Date(b.DATE) - new Date(a.DATE);\r\n    });\r\n    allNotes.reverse()\r\n\r\n    allNotes.forEach(element => {\r\n        switch (element.ID) {\r\n            case 'tome': {\r\n                curentToMeSum += parseInt(element.SUM, 10)\r\n                if (data[data.length-1].name === element.DATE) {\r\n                    data.pop()\r\n                }\r\n                data.push({name: element.DATE, tome: curentToMeSum, meto: currentMeToSum })\r\n                break;\r\n            }\r\n            case 'meto': {\r\n                currentMeToSum += parseInt(element.SUM, 10)\r\n                data.push({name: element.DATE, tome: curentToMeSum, meto: currentMeToSum})\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <ResponsiveContainer height={300} width='100%'>\r\n            <LineChart\r\n                data={data}\r\n                margin={{right: 30, top: 30}}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"tome\" name=\"Мне должны\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                <Line type=\"monotone\" dataKey=\"meto\" name=\"Я должен\" stroke=\"#82ca9d\" />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n\r\nexport default Graph;","import React, { useState } from 'react';\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Typography,\r\n    TextField,\r\n    IconButton\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getData, storeData } from '../data/localStorage';\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport Header from '../components/Header';\r\nimport Graph from '../components/Graph';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    content: {\r\n        marginTop: '16px'\r\n    },\r\n    button: {\r\n        textAlign: 'center',\r\n        position: 'sticky',\r\n        top: 'auto',\r\n        bottom: 0,\r\n    },\r\n    header: {\r\n        position: 'sticky',\r\n        top: '0'\r\n\r\n    },\r\n    infos: {\r\n        padding: '4px',\r\n    },\r\n    editButton: {\r\n        padding: '0px',\r\n        paddingLeft: '8px'\r\n    }\r\n});\r\n\r\n\r\nconst ProfilePage = ({ setUserLoggedIn }) => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const [editName, setEditName] = useState(false);\r\n    const [editEmail, setEditEmail] = useState(false);\r\n    const [editPassword, setEditPassword] = useState(false);\r\n\r\n    const currentUser = getData('loggedUser')\r\n    const allUsers = getData('users')\r\n    const allNotes = getData('notes')\r\n\r\n    let meToGeneralSum = 0\r\n    let toMeGeneralSum = 0\r\n    let currentUserPos = -1\r\n    let currentUserName = ''\r\n    let currentUserEmail = ''\r\n    let currentUserPassword = ''\r\n\r\n    for (let i = 0; i < allUsers.length; i++) {\r\n        if (allUsers[i].EMAIL === currentUser) {\r\n            currentUserPos = i\r\n            currentUserName = allUsers[i].NAME\r\n            currentUserEmail = allUsers[i].EMAIL\r\n            currentUserPassword = allUsers[i].PASSWORD\r\n        }\r\n    }\r\n\r\n    allNotes.forEach(element => {\r\n        if (element.ID === 'tome') {\r\n            toMeGeneralSum += parseInt(element.SUM, 10)\r\n        } else if (element.ID === 'meto') {\r\n            meToGeneralSum += parseInt(element.SUM, 10)\r\n        }\r\n    });\r\n\r\n    const nameRegex = /^[а-яА-Яa-zA-Z]+$/\r\n    const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/\r\n    const [userName, setUserName] = useState(currentUserName)\r\n    const [userEmail, setUserEmail] = useState(currentUserEmail)\r\n    const [userPassword, setUserPassword] = useState(currentUserPassword)\r\n    const nameError = !nameRegex.test(userName)\r\n    const emailError = !emailRegex.test(userEmail)\r\n    const passwordError = !passwordRegex.test(userPassword)\r\n\r\n\r\n    const tryEditName = () => {\r\n        if (!editName)\r\n            setEditName(true)\r\n        else if (!nameError) {\r\n            setEditName(false)\r\n            trySave()\r\n        }\r\n    }\r\n\r\n    const tryEditEmail = () => {\r\n        if (!editEmail)\r\n            setEditEmail(true)\r\n        else if (!emailError) {\r\n            setEditEmail(false)\r\n            trySave()\r\n        }\r\n    }\r\n\r\n    const tryEditPassword = () => {\r\n        if (!editPassword)\r\n            setEditPassword(true)\r\n        else if (!passwordError) {\r\n            setEditPassword(false)\r\n            trySave()\r\n        }\r\n    }\r\n\r\n    const trySave = () => {\r\n        let newName = userName\r\n        let newEmail = userEmail\r\n        let newPassword = userPassword\r\n\r\n        allUsers[currentUserPos].NAME = newName\r\n        allUsers[currentUserPos].EMAIL = newEmail\r\n        allUsers[currentUserPos].Password = newPassword\r\n        storeData('users', allUsers)\r\n        storeData('loggedUser', newEmail)\r\n    }\r\n\r\n    console.log(localStorage)\r\n\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"column\">\r\n                <Grid item className={classes.header} id='header'>\r\n                    <Header setUserLoggedIn={setUserLoggedIn} pageId={'profile'} />\r\n                </Grid>\r\n\r\n                <Grid item container id='content'>\r\n                    <Grid item xs={false} sm={1} />\r\n                    <Grid item container xs={12} sm={10} className={classes.content} justify=\"center\" alignItems=\"flex-start\">\r\n\r\n                        <Grid item container id='avatar' direction=\"column\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <AccountCircleIcon style={{ fontSize: '7.5rem' }} />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                >\r\n                                    Загрузить фото\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item container id='infos' direction=\"column\" alignItems=\"center\" style={{ marginTop: '16px' }}>\r\n\r\n                            <Grid item container className={classes.infos} justify=\"center\" alignItems=\"center\">\r\n                                <Grid item>\r\n                                    {\r\n                                        !editName\r\n                                            ? <Typography><b>{'Имя: '}</b>{currentUserName}</Typography>\r\n                                            : <TextField\r\n                                                error={nameError}\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                fullWidth\r\n                                                id=\"name\"\r\n                                                label=\"Имя\"\r\n                                                type=\"name\"\r\n                                                value={userName}\r\n                                                onChange={e => { setUserName(e.currentTarget.value) }}\r\n                                                helperText={nameError ? \"Введите корректное имя\" : \"\"}\r\n                                                autoFocus\r\n                                            />\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <IconButton\r\n                                        onClick={tryEditName}\r\n                                        className={classes.editButton}\r\n                                    >\r\n                                        {!editName ? <EditIcon /> : <SaveIcon />}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid item container className={classes.infos} justify=\"center\" alignItems=\"center\">\r\n                                <Grid item>\r\n                                    {\r\n                                        !editEmail\r\n                                            ? <Typography><b>{'Email: '}</b>{currentUserEmail}</Typography>\r\n                                            : <TextField\r\n                                                error={emailError}\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                fullWidth\r\n                                                id=\"email\"\r\n                                                label=\"Email\"\r\n                                                type=\"email\"\r\n                                                value={userEmail}\r\n                                                onChange={e => { setUserEmail(e.currentTarget.value) }}\r\n                                                helperText={emailError ? \"Введите корректный email\" : \"\"}\r\n                                                autoFocus\r\n                                            />\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <IconButton\r\n                                        onClick={tryEditEmail}\r\n                                        className={classes.editButton}\r\n                                    >\r\n                                        {!editEmail ? <EditIcon /> : <SaveIcon />}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid item container className={classes.infos} justify=\"center\" alignItems=\"center\">\r\n                                <Grid item>\r\n                                    {\r\n                                        !editPassword\r\n                                            ? <Typography><b>{'Пароль: '}</b>{currentUserPassword}</Typography>\r\n                                            : <TextField\r\n                                                error={passwordError}\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                fullWidth\r\n                                                id=\"password\"\r\n                                                label=\"Пароль\"\r\n                                                type=\"text\"\r\n                                                value={userPassword}\r\n                                                onChange={e => { setUserPassword(e.currentTarget.value) }}\r\n                                                helperText={passwordError ? \"Введите корректный пароль\" : \"\"}\r\n                                                autoFocus\r\n                                            />\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <IconButton\r\n                                        onClick={tryEditPassword}\r\n                                        className={classes.editButton}\r\n                                    >\r\n                                        {!editPassword ? <EditIcon /> : <SaveIcon />}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid item className={classes.infos}>\r\n                                <Typography style={{ marginTop: '16px' }}>{'Всего мне должны: '}<b>{toMeGeneralSum} руб.</b></Typography>\r\n                                <Typography>{'Всего я должен: '}<b>{meToGeneralSum} руб.</b></Typography>\r\n                            </Grid>\r\n\r\n                            \r\n                                <Graph />\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={false} sm={1} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfilePage","//@ts-check\r\nimport React, { useState } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport RegisterPage from './panels/RegisterPage';\r\nimport LoginPage from './panels/LoginPage';\r\nimport MainPage from './panels/MainPage';\r\nimport ProfilePage from './panels/ProfilePage';\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\r\n\r\n  return (\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <MainPage userLoggedIn={userLoggedIn} setUserLoggedIn={setUserLoggedIn} />} />\r\n        <Route path=\"/login\" render={() => <LoginPage setUserLoggedIn={setUserLoggedIn} />} />\r\n        <Route path=\"/register\" render={() => <RegisterPage />} />\r\n        <Route path='/profile' render={() => <ProfilePage setUserLoggedIn={setUserLoggedIn} />} />\r\n      </Switch>\r\n  );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\n\r\nconst history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <SnackbarProvider maxSnack=\"2\" >\r\n        <Router history={history}>\r\n            <App />\r\n        </Router>\r\n    </SnackbarProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}